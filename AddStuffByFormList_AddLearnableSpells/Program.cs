using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Exceptions;
using System.Reflection;

namespace AddStuffByFormList_AddLearnableSpells
{
    public class Program
    {
        public static Lazy<SpecialSettings> _Settings = new Lazy<SpecialSettings>();
        public static SpecialSettings Settings => _Settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "MyAddStuff.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Console.WriteLine("Hello World!");

            if (!Settings.LearnableSpellModNames.Any())
            {
                Console.WriteLine("Missing Mod Names. This does nothing without setting what mods you want to add from.");
                throw new Exception("Missing Mod Names. This does nothing without setting what mods you want to add from.");
            }

            if(!state.LinkCache.TryResolve<IFormListGetter>(FormKey.Factory("000D63:Add Stuff By FormList.esp"), out var temp))
            {
                Console.WriteLine("Could not find \"Add Stuff By FormList.esp\" FormList.");
                throw new MissingModException("Add Stuff By FormList.esp");
            }
            FormList _ASBF_FormListStuff = state.PatchMod.FormLists.GetOrAddAsOverride(temp);
            

            HashSet<FormKey> booksToAdd = new();

            foreach (var book in state.LoadOrder.PriorityOrder.Book().WinningOverrides())
            {
                if (!Settings.LearnableSpellModNames.Contains(book.FormKey.ModKey)) continue;

                if (book.Teaches is IBookSpellGetter spellTome)
                {
                    if (Settings.LearnableSpellModNamesValidHalfCostPerks.Any())
                    {
                        if(state.LinkCache.TryResolve<ISpellGetter>(spellTome.Spell.FormKey, out var spell))
                        {
                            if (spell.HalfCostPerk != null && Settings.LearnableSpellModNamesValidHalfCostPerks.Contains(spell.HalfCostPerk.FormKey))
                            {
                                Console.WriteLine($"Adding {book.FormKey} ; {spellTome.Spell.FormKey}");
                                _ASBF_FormListStuff.Items.Add(spellTome.Spell.FormKey);
                            }
                            else if(Settings.AddBooksFromLearnableSpellModNames) booksToAdd.Add(book.FormKey);
                        }
                    }
                    else
                    {
                        Console.WriteLine($"Adding {book.FormKey} ; {spellTome.Spell.FormKey}");
                        _ASBF_FormListStuff.Items.Add(spellTome.Spell.FormKey);
                    }
                }
            }

            foreach (var spellKey in Settings.DirectSpells)
            {
                Console.WriteLine($"Adding Direct Spell {spellKey}");
                _ASBF_FormListStuff.Items.Add(spellKey);
            }

            if (Settings.AddBooksFromLearnableSpellModNames)
            {
                if (Settings.AddBooksToThis.Equals(_ASBF_FormListStuff.FormKey))
                {
                    AddBooksTo(booksToAdd, _ASBF_FormListStuff);
                    return;
                }

                if (state.LinkCache.TryResolve<ISkyrimMajorRecordGetter>(Settings.AddBooksToThis, out var rec))
                {
                    if (rec is IFormListGetter    formList)  AddBooksTo(booksToAdd, state.PatchMod.FormLists.GetOrAddAsOverride(formList));
                    else if (rec is IContainerGetter   container) AddBooksTo(booksToAdd, state.PatchMod.Containers.GetOrAddAsOverride(container));
                    else if (rec is ILeveledItemGetter levelList) AddBooksTo(booksToAdd, state.PatchMod.LeveledItems.GetOrAddAsOverride(levelList));
                    else
                    {
                        Console.WriteLine("Add Books To This failed.");
                        Console.WriteLine("Record either does not exist or it is not a FormList, Container, or Level Item List.");
                    }
                }
            }
        }

        private static void AddBooksTo(HashSet<FormKey> booksToAdd, LeveledItem leveledItem)
        {
            if (leveledItem.Entries == null) leveledItem.Entries = new();

            foreach (var bookKey in booksToAdd)
            {
                Console.WriteLine($"Adding Spell Book {bookKey}");
                LeveledItemEntry leveledItemEntry = new();
                leveledItemEntry.Data = new();
                leveledItemEntry.Data.Reference.FormKey = bookKey;
                leveledItemEntry.Data.Level = 1;
                leveledItemEntry.Data.Count = 1;

                leveledItem.Entries.Add(leveledItemEntry);
            }
        }

        public static void AddBooksTo(HashSet<FormKey> booksToAdd, FormList formList)
        {
            foreach (var bookKey in booksToAdd)
            {
                Console.WriteLine($"Adding Spell Book {bookKey}");
                formList.Items.Add(bookKey);
            }
        }

        public static void AddBooksTo(HashSet<FormKey> booksToAdd, Container container)
        {
            if(container.Items == null) container.Items = new();

            foreach (var bookKey in booksToAdd)
            {
                Console.WriteLine($"Adding Spell Book {bookKey}");
                ContainerEntry containerEntry = new();
                containerEntry.Item.Item.FormKey = bookKey;
                containerEntry.Item.Count = 1;
                container.Items.Add(containerEntry);
            }
        }

    }
}
